1. 주석 처리
{/*  주석 내용  */}


2. 데이터 바인딩
{ } 로 감싸서 변수 넣기

var data = '안녕';
<div>{data}</div>


3. JSX에서 class 선언 
class가 아닌 className으로 선언

- class = "blue-div" (X)
- className = "blue-div" (O)


4. State 사용 방법
- useState() : state를 하나 만들어주는 함수
- 필수 import React, { useState } from 'react';
- 사용 이유?
    - 변수가 변경될 때 자동으로 HTML을 재렌더링하기 위함.
- let [state_title, state_title_change] = useState("This is State");
    - state_title : State Value. 즉, "This is State" (1번 째 배열 항목)
    - state_title_change : State Value 변경 함수 (2번 째 배열 항목)


5. onClick 사용
- JS : <div onclick="함수 or 코드">
- JSX : <div onClick={함수}>

ex) 
<div onClick={ func_hi }> 
<div onClick={ function(){ 실행할 코드 } }>
<div onClick={ () => { 실행할 코드 } }>


6. deep copy 방법
- object / array 자료형 deep copy 시 ... 을 이용
ex) 
let [state_title, state_title_change] = useState(["지금 날씨는 영하 9도네요.","This is State", "오늘 풋살합니다~"]);
var value = [...state_title];


7. map (반복문) 사용 방법
- array 자료형에 사용할 수 있는 내장 함수

ex)
var array = [2,3,4];
array.map(function(item){
  return item;
});

ex)
function App (){
  return (
    <div>
      ...
      { array.map(function(item){
        return (<div>item</div>)
      }) }
    </div>
  )
}


8. props를 이용해 모달에 state 전달
- 자식컴포넌트에 전송할이름={보내줄 state명}
- 자식컴포넌트 선언하는 function 안에 파라미터 생성 후 사용

ex)
function App (){
  let [state_title, state_title_change] = useState(["지금 날씨는 영하 9도네요.","This is State", "오늘 풋살합니다~"]);
  let [date_, date_change] = useState(["2021-12-17","2021-12-18","2021-12-19"]);

  return (
    <div>
      <Modal state_title={state_title} date_={date_}></Modal>
    </div>
  )
}

function Modal(props){
  return (
    <div className="modal">
      <h2>제목 { props.state_title[0] }</h2>
      <p>날짜 { props.date_[0]} </p>
      <p>상세내용</p>
    </div>
  )
}


